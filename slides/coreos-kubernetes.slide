Managing Containers at Scale with CoreOS and Kubernetes
Philly ETE
Tags: coreos, kubernetes

Kelsey Hightower
CoreOS
kelsey.hightower@coreos.com
@kelseyhightower

* Goals

- Provide an overview of CoreOS and Kubernetes 
- Live demonstration of Kubernetes in action
- Demystify and spark your imagination

* How would you design your infrastructure if you couldn't login? Ever.

* Container

Not golden images.

- Unix processes not lightweight Virtual Machines
- application + dependencies = image
- Runtime environment (cgroups, namespaces, env vars)

* CoreOS

Container optimized operating system.

- Minimal operating system (size, features)
- No package manager
- Automatic updates (atomic)

* Kubernetes

Container management, scheduling, and service discovery.

- API driven application management
- Agents monitor endpoints for state changes (real-time)
- Controllers enforce desired state
- Labels identify resources (nodes, applications, services)

* Kubernetes

Resources

- node
- pod
- replication controller
- service

* Node

Runs containers and proxies service requests.

- flannel
- docker
- kubelet
- proxy

* Node Manifest

.code manifests/node.json

* Pod

Represents a logical application.

- One or more containers
- Shared volumes and network namespace
- Identified by ID or labels
- Optionally managed by replication controllers

* Pod Manifest

.code manifests/pod.json

* Replication Controller

Manages a replicated set of pods.

- Creates pods from a template
- Ensures only the specified number of pods are running
- Rolling upgrades

* Replication Controller Manifest

.code manifests/replication-controller.json

* Service

Service discovery for pods.

- Proxy runs on each node
- IP per service (avoid port collisions)
- Basic round-robin algorithm
- Dynamic backends based on label queries 

* Service Manifest

.code manifests/service.json

* Real world example

* Cluster Details

Bare metal environment.

- iPXE with storage drives
- Cross host communication between containers (flannel)

* pgview

Postgres database info as a service.

Application requirements:

- Horizontally scalable 
- Dedicated Memcache instance per application (local caching)
- Postgres database

Operational Requirements:

- Automated service discovery
- Zero downtime application upgrades

* pgview

Request

  curl http://api.pgview.com -d @rpc/sqlfeatures.json

Response

  {
      "id": 0,
      "result": {
          "Features": [
              "Embedded Ada",
              "Embedded C",
              "Embedded COBOL",
              "Embedded Fortran",
              "Embedded MUMPS",
              "Embedded Pascal",
              ...
          ],
          "Count": 672
      },
      "error": null
  }

* Kubernetes in action
